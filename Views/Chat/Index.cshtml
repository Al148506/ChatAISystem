@model ChatAISystem.Models.ViewModels.ChatViewModel
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat con IA en tiempo real</title>
    <link rel="stylesheet" href="~/css/Chat.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
</head>
<body>
    <div class="chat-container">
        <!-- Sidebar con lista de personajes -->
        <div class="sidebar">
            @foreach (var character in Model.Characters)
            {
                <div class="character" onclick="selectCharacter('@character.Id', '@character.Name')">
                    <img src="@character.AvatarUrl" alt="@character.Name" />
                    <span class="character-name">@character.Name</span>
                </div>
            }
        </div>

        <!-- Área principal del chat -->
        <div class="chat-main">
            <!-- Barra superior -->
            <div class="chat-header">
                <span id="chatTitle">Chat con IA</span>
            </div>

            <!-- Caja de mensajes -->
            <div id="chatBox" class="chat-box"></div>

            <!-- Campos ocultos para el ID del usuario y personaje seleccionado -->
            <input type="hidden" id="userId" value="@Model.UserId" />
            <input type="hidden" id="characterId" value="" />

            <!-- Campo para escribir el mensaje -->
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Escribe un mensaje" onkeydown="handleKeyPress(event)">
                <button onclick="sendMessage()">Enviar</button>
            </div>
        </div>
    </div>

    <script>
        // Conexión con SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().catch(err => console.error(err.toString()));

        let userId = parseInt(document.getElementById("userId").value); // ID del usuario
        let characterId = null; // ID del personaje seleccionado
        let page = 1; // Página de mensajes cargados
        let loading = false; // Evita múltiples cargas al mismo tiempo

        // Función para seleccionar un personaje de la sidebar
        function selectCharacter(id, name) {
            characterId = parseInt(id, 10); // Asignar el ID del personaje seleccionado
            document.getElementById("characterId").value = id;
            document.getElementById("chatTitle").innerText = `Chat con ${name}`;
            page = 1; // Reiniciar la página a 1
            document.getElementById("chatBox").innerHTML = ""; // Limpiar el chatBox
            loadChatHistory(); // Cargar los últimos 10 mensajes
        }

        // Función para enviar un mensaje
        function sendMessage() {
            const userId = parseInt(document.getElementById("userId").value, 10);
            const characterId = parseInt(document.getElementById("characterId").value, 10);
            const message = document.getElementById("messageInput").value.trim();

            if (isNaN(characterId)) {
                alert("Por favor, selecciona un personaje de la lista.");
                return;
            }
            if (!message) {
                alert("Por favor, ingresa un mensaje.");
                return;
            }

            connection.invoke("SendMessage", userId, characterId, message)
                .catch(err => console.error(err.toString()));

            document.getElementById("messageInput").value = "";
        }

        // Función para cargar el historial de mensajes
        function loadChatHistory() {
            if (loading || !characterId) return;
            loading = true;

            console.log("Enviando parámetros:", { userId, characterId, page, pageSize: 10 });

            connection.invoke("LoadChatHistory", userId, characterId, page, 10)
                .then(() => {
                    page++;
                })
                .catch(err => {
                    console.error("Error al invocar LoadChatHistory:", err.toString());
                })
                .finally(() => {
                    loading = false; // Asegura que se reestablezca el flag
                });
        }


        // Función para manejar la tecla Enter
        function handleKeyPress(event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        }

        // Función para agregar un mensaje al chat
        function addMessageToChat(sender, message, mode = "append") {
            const chatBox = document.getElementById("chatBox");
            const msgContainer = document.createElement("div");
            msgContainer.classList.add("message");

            if (sender === "ai") { // Cambia "IA" por "ai" para coincidir con el valor de Role
                msgContainer.classList.add("received");
            } else {
                msgContainer.classList.add("sent");
            }

            msgContainer.innerHTML = `<span>${message}</span>`;

            if (mode === "prepend") {
                chatBox.prepend(msgContainer);
            } else {
                chatBox.appendChild(msgContainer);
                scrollToBottom();
            }
        }

        // Función para hacer scroll al final del chat
        function scrollToBottom() {
            const chatBox = document.getElementById("chatBox");
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Evento para cargar más mensajes al hacer scroll hacia arriba
        document.getElementById("chatBox").addEventListener("scroll", function () {
            if (this.scrollTop === 0) {
                loadChatHistory();
            }
        });

        // Evento para recibir mensajes nuevos
        connection.on("ReceiveMessage", (sender, message) => {
            console.log(`Sender recibido: ${sender}`); // Verifica qué valor está recibiendo
            addMessageToChat(sender === "IA" ? "ai" : "user", message);
        });

        // Evento para cargar el historial de mensajes
        connection.on("LoadChatHistory", (jsonMessages) => {
            try {
                const messages = JSON.parse(jsonMessages);
                console.log("Mensajes recibidos:", messages);
                if (messages.length === 0) return;

                messages.forEach(msg => {
                    // Usa msg.Role y msg.MessageText en lugar de msg.role y msg.messageText
                    addMessageToChat(msg.Role === "user" ? "user" : "ai", msg.MessageText, "prepend");
                });

                if (page === 1) {
                    scrollToBottom();
                }
            } catch (err) {
                console.error("Error al parsear JSON:", err);
            } finally {
                loading = false;
            }
        });
    </script>
</body>
</html>